C 语言中文网络 ： http://c.biancheng.net/c/32/

#if，#endif的用法
    #if的后面接的是表达式，条件语句

    #if的具体作用是，如果满足条件语句，则编译器会把#if与#endif之间的代码编译进去。此处只编译，不执行。


####################################################################
#define

    #define 定义一个标识符来表示一个常量。其特点是：定义的标识符不占内存，只是一个临时的符号，预编译后这个符号就不存在了。
    预编译又叫预处理。预编译不是编译，而是编译前的处理。这个操作是在正式编译之前由系统自动完成的。
    #define  标识符  常量   //注意, 最后没有分号
    #define 和 #include 一样，也是以“#”开头的。凡是以“#”开头的均为预处理指令，#define也不例外。

    #define又称宏定义，标识符为所定义的宏名，简称宏。标识符的命名规则与前面讲的变量的命名规则是一样的。#define 的功能是将标识符定义为其后的常量。
    一经定义，程序中就可以直接用标识符来表示这个常量。是不是与定义变量类似？但是要区分开！变量名表示的是一个变量，但宏名表示的是一个常量。可以给变量赋值，但绝不能给常量赋值。

    宏所表示的常量可以是数字、字符、字符串、表达式。其中最常用的是数字。

    宏定义最大的好处是“方便程序的修改”。使用宏定义可以用宏代替一个在程序中经常使用的常量。注意，是“经常”使用的。这样，当需要改变这个常量的值时，就不需要对整个程序一个一个进行修改，
    只需修改宏定义中的常量即可。且当常量比较长时，使用宏就可以用较短的有意义的标识符来代替它，这样编程的时候就会更方便，不容易出错。因此，宏定义的优点就是方便和易于维护。
    那么程序在预编译的时候是怎么处理宏定义的呢？或者说是怎么处理预处理指令的呢？

    其实预编译所执行的操作就是简单的“文本”替换。对宏定义而言，预编译的时候会将程序中所有出现“标识符”的地方全部用这个“常量”替换，称为“宏替换”或“宏展开”。替换完了之后再进行正式的编译。
    所以说当单击“编译”的时候实际上是执行了两个操作，即先预编译，然后才正式编译。#include<stdio.h>也是这样的，即在预处理的时候先单纯地用头文件stdio.h中所有的“文本”内容替换程序中
    #include<stdio.h>这一行，然后再进行正式编译。

    需要注意的是，预处理指令不是语句，所以后面不能加分号。这是很多新手经常犯的错误。#include 后面也没有加分号。


    宏定义 #define 一般都写在函数外面，与 #include 写在一起。当然，写在函数里面也没有语法错误，但通常不那么写。#define 的作用域为自
    #define 那一行起到源程序结束。如果要终止其作用域可以使用
    # include <stdio.h>
    # define PI 3.14159
    int main(void)
    {
        double r, s;
        printf("请输入圆的半径:");
        scanf("%lf", &r);  //scanf中, double只能用%lf
        s = PI * r * r;
        printf("s=PI*r^2 = %.6f\n", s);  //PI不会被宏替换
        return 0;
    }

    输出结果是：
    请输入圆的半径:1
    s=PI*r^2 = 3.141590
#########################################################################
#undef 命令，格式为：
    undef 后面的标识符表示你所要终止的宏。比如前面在程序开头用 define 定义了一个宏 M，它原本的作用范围是一直到程序结束，但如果现在在程序中某个位置加了一句：
    纯文本复制
    #undef  M

#########################################################################

extern关键字，C语言extern关键字用法详解


    我们知道，程序的编译单位是源程序文件，一个源文件可以包含一个或若干个函数。在函数内定义的变量是局部变量，而在函数之外定义的变量则称为外部变量，外部变量也就是我们所讲的全局变量。
    它的存储方式为静态存储，其生存周期为整个程序的生存周期。全局变量可以为本文件中的其他函数所共用，它的有效范围为从定义变量的位置开始到本源文件结束。

    然而，如果全局变量不在文件的开头定义，有效的作用范围将只限于其定义处到文件结束。如果在定义点之前的函数想引用该全局变量，则应该在引用之前用关键字 extern 对该变量作“外部变量声明”，
    表示该变量是一个已经定义的外部变量。有了此声明，就可以从“声明”处起，合法地使用该外部变量。


    来看一个简单的例子：
    #include <stdio.h>
    int max(int x,int y);
    int main(void)
    {
        int result;
        /*外部变量声明*/
        extern int g_X;
        extern int g_Y;
        result = max(g_X,g_Y);
        printf("the max value is %d\n",result);
        return 0;
    }
    /*定义两个全局变量*/
    int g_X = 10;
    int g_Y = 20;
    int max(int x, int y)
    {
        return (x>y ? x : y);
    }

    代码中，全局变量 g_X 与 g_Y 是在 main 函数之后声明的，因此它的作用范围不在 main 函数中。如果我们需要在 main 函数中调用它们，就必须使用 extern 来对变量 g_X 与 g_Y 作“外部变量声明”，
    以扩展全局变量的作用域。也就是说，如果在变量定义之前要使用该变量，则应在使用之前加 extern 声明变量，使作用域扩展到从声明开始到本文件结束。

    如果整个工程由多个源文件组成，在一个源文件中想引用另外一个源文件中已经定义的外部变量，同样只需在引用变量的文件中用 extern 关键字加以声明即可。下面就来看一个多文件的示例:
    /****max.c****/
    #include <stdio.h>
    /*外部变量声明*/
    extern int g_X ;
    extern int g_Y ;
    int max()
    {
        return (g_X > g_Y ? g_X : g_Y);
    }
    /***main.c****/
    #include <stdio.h>
    /*定义两个全局变量*/
    int g_X=10;
    int g_Y=20;
    int max();
    int main(void)
    {
        int result;
        result = max();
        printf("the max value is %d\n",result);
        return 0;
    }

    运行结果为：
    the max value is 20

    对于多个文件的工程，都可以采用上面这种方法来操作。对于模块化的程序文件，可在其文件中预先留好外部变量的接口，也就是只采用 extern 声明变量，
    而不定义变量，max.c 文件中的 g_X 与 g_Y 就是如此操作的。

    通常，这些外部变量的接口都是在模块程序的头文件中声明的，当需要使用该模块时，只需要在使用时具体定义一下这些外部变量即可。main.c 里的 g_X 与 g_Y 则是相关示例。

    不过，需要特别注意的是，由于用 extern 引用外部变量，可以在引用的模块内修改其变量的值，因此，如果有多个文件同时要对应用的变量进行操作，
    而且可能会修改该变量，那就会影响其他模块的使用。因此，我们要慎重使用。


#########################################################################